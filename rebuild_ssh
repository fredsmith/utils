#! /usr/bin/env bash

# This script assumes sourceable files exist in the directory ~/workspace/aws-creds with a .txt extension
# example of one of those files:

# export AWS_VPC_STACK="prod-edx"
# export AWS_SSH_USERNAME="fredsmith"
# export AWS_DEFAULT_REGION='us-east-1'
# export DO_BOTOCONFIG="true"
# export DO_AWSCONFIG="true"
# export AWS_PROFILE_NAME="edx"
# export AWS_ROLE_ARN="arn of role to assume"
# export AWS_MFA_ARN="your mfa arn"
# export AWS_SOURCE_PROFILE="default"
# export AWS_ACCESS_KEY_ID="SECRET KEY ID of your default profile"
# export AWS_SECRET_ACCESS_KEY="SECRET ACCESS KEY of your default profile"
# until . ~/bin/assume-role edx `pass otp otp/aws`; do
#   sleep 30;
# done
source ~/src/github.com/fredsmith/dotfiles/bash/setenv
source ~/src/github.com/fredsmith/dotfiles/bash/pass


cat ~/.ssh/header.cfg > ~/.ssh/config
echo '' > ~/.aws/credentials
echo '' > ~/.aws/config
echo '' > ~/.boto

if [ ! -z "$PASSWORD_STORE_DIR" ]; then
  passdir=$PASSWORD_STORE_DIR
else
  passdir='~/.password-store'
fi

for FILE in $passdir/env/*.gpg; do
  ACCOUNT=$( basename $FILE | sed -e "s/\.gpg\$//");
  echo -n " - $ACCOUNT "
   if [[ "$@ " == *"$ACCOUNT "* ]]; then
    echo '' > ~/.ssh/config.$ACCOUNT
    echo '' > ~/.aws/credentials.$ACCOUNT
    echo '' > ~/.aws/config.$ACCOUNT
    echo '' > ~/.boto.$ACCOUNT
    BOUNCEHOST='none'
    setenv $ACCOUNT
    if [[ ! -z "$DO_AWSCONFIG" ]]; then
      echo -n "[AWS]"
      if [[ ! -z "$AWS_ACCESS_KEY_ID" ]]; then
        echo "[$AWS_PROFILE_NAME]" >> ~/.aws/credentials.$ACCOUNT 
        echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/credentials.$ACCOUNT
        echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials.$ACCOUNT
        echo "" >> ~/.aws/credentials.$ACCOUNT
      fi
      echo "[profile $AWS_PROFILE_NAME]" >> ~/.aws/config.$ACCOUNT
      echo "region=$AWS_DEFAULT_REGION" >> ~/.aws/config.$ACCOUNT
      if [[ ! -z "$AWS_ROLE_ARN" ]]; then
        echo "role_arn=$AWS_ROLE_ARN" >> ~/.aws/config.$ACCOUNT
        echo "source_profile=$AWS_SOURCE_PROFILE" >> ~/.aws/config.$ACCOUNT
      fi
      if [[ ! -z "$AWS_MFA_ARN" ]]; then
        echo "mfa_serial=$AWS_MFA_ARN" >> ~/.aws/config.$ACCOUNT
      fi
    fi
    echo "" >> ~/.aws/config.$ACCOUNT
    if [[ ! -z "$DO_BOTOCONFIG" ]]; then
      echo -n "[boto]"
      echo "[profile $AWS_PROFILE_NAME]" >> ~/.boto.$ACCOUNT
      if [[ ! -z "$AWS_ACCESS_KEY_ID" ]]; then
        echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.boto.$ACCOUNT
        echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.boto.$ACCOUNT
      fi
      if [[ ! -z "$AWS_ROLE_ARN" ]]; then
        echo "role_arn=$AWS_ROLE_ARN" >> ~/.boto.$ACCOUNT
        echo "source_profile=$AWS_SOURCE_PROFILE" >> ~/.boto.$ACCOUNT
      fi

    fi
    echo "" >> ~/.boto.$ACCOUNT
    if [[ -z "$SKIP_SSHCONFIG" ]]; then
      echo -n "[ssh]"
      echo "#############################################" >> ~/.ssh/config.$ACCOUNT
      echo "############### $AWS_PROFILE_NAME ###############" >> ~/.ssh/config.$ACCOUNT
      echo "#############################################" >> ~/.ssh/config.$ACCOUNT
      if [[ ! -z "$AWS_NETMASK" ]]; then
        echo "Host $AWS_NETMASK.*" >> ~/.ssh/config.$ACCOUNT
        echo "    ProxyCommand ssh -W %h:%p $AWS_VPC_STACK-bastion" >> ~/.ssh/config.$ACCOUNT
        echo "    User $AWS_SSH_USERNAME" >> ~/.ssh/config.$ACCOUNT
        echo "" >> ~/.ssh/config.$ACCOUNT
      fi
        if [[ ! -z "$SSH_HOST_PREFIX" ]]; then
              export PREFIX="--prefix $SSH_HOST_PREFIX"
        fi
      aws-ssh-config.py --tags Name --private --user=$AWS_SSH_USERNAME $PREFIX >> ~/.ssh/config.$ACCOUNT
    else
      echo "" > ~/.ssh/config.$ACCOUNT
    fi
  fi

  cat ~/.ssh/config.$ACCOUNT >> ~/.ssh/config
  cat ~/.aws/credentials.$ACCOUNT >> ~/.aws/credentials
  cat ~/.aws/config.$ACCOUNT >> ~/.aws/config
  cat ~/.boto.$ACCOUNT >> ~/.boto
  echo "" 

  unset AWS_VPC_STACK
  unset SKIP_SSHCONFIG
  unset STACK
  unset AWS_SSH_KEY
  unset SSHKEY
  unset AWS_SSH_USERNAME
  unset SSHUSER
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  unset AWS_NETMASK
  unset BOUNCEHOST
  unset DO_BOTOCONFIG
  unset DO_AWSCONFIG
  unset AWS_DEFAULT_PROFILE
  unset AWS_PROFILE_NAME
  unset SSH_HOST_PREFIX
  unset AWS_ROLE_ARN
  unset AWS_SOURCE_PROFILE
  unset AWS_MFA_ARN
done
